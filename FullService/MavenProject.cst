<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="Text" Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.DirectoryServices" %>
<%@ Assembly Name="System.Web" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.Diagnostics" %>
<%@ Import NameSpace="System.Xml" %>
<%@ Import NameSpace="System.Xml.Xsl" %>
<%@ Import NameSpace="System.Xml.XPath" %> 

<%@ Register Template="Pom.cst" Name="PomTemplate" %>
<%@ Register Template="Application.cst" Name="AppTemplate" %>
<%@ Register Template="CheckHealthController.cst" Name="CheckHealthTemplate" %>
<%@ Register Template="SwaggerConfig.cst" Name="SwaggerTemplate" %>
<%@ Register Template="Logback.cst" Name="LogbackTemplate" %>
<%@ Register Template="GeneratorConfig.cst" Name="GeneratorConfigTemplate" %>
<%@ Property Name="GroupId" Default="xiaomin.demo" Type="System.String" Description="项目GroupId" %>
<%@ Property Name="ArtifactId" Default="demo" Type="System.String" Description="项目ArtifactId" %>
<%@ Property Name="Version" Default="1.0" Type="System.String" Description="项目版本" %>
<%@ Property Name="SpringBootVersion" Default="1.5.9.RELEASE" Type="System.String" Description="Spring Boot版本" %>
<%@ Property Name="PackageName" Default="xiaomin.demo" Type="System.String" %>
<%@ Property Name="MysqlConnectorPath" Default="SomeValue" Type="System.String" %>
<%@ Property Name="DevDBConnectionURL" Default="jdbc:mysql://127.0.0.1:3306/testdb" Type="System.String" %>
<%@ Property Name="DevDBUserId" Default="root" Type="System.String" %>
<%@ Property Name="DevDBPassword" Default="root" Type="System.String" %>
<%@ Property Name="OutPut" Default="D:" Type="System.String" %>
<%= CreateProject()%>
<script runat="template">

public string CreateProject(){
    string [] folders={
        @"\src",
        @"\src\main",
        @"\src\main\java",
        @"\src\main\resources",
        @"\src\test",
        @"\src\test\java"
    };
    
    var utf8WithoutBom = new System.Text.UTF8Encoding(false);
    
    
    //创建目录
    var dir=Directory.CreateDirectory(this.OutPut+this.ArtifactId);
    
    //创建ParentPom文件
    CodeTemplate pomtemplate = new PomTemplate();　
    pomtemplate.SetProperty("GroupId",this.GroupId);
    pomtemplate.SetProperty("ArtifactId",this.ArtifactId);
    pomtemplate.SetProperty("Version",this.Version);
    pomtemplate.SetProperty("SpringBootVersion",this.SpringBootVersion);
    String result=pomtemplate.RenderToString();
    pomtemplate.RenderToFile(dir.FullName+@"\pom.xml",true);
    Debug.WriteLine(result);
    
    //创建基本目录
    foreach(String folder in folders){
        Debug.WriteLine(dir.FullName+folder);
        Directory.CreateDirectory(dir.FullName+folder);
    }
    
    //复制配置文件
    File.Copy("application.properties",dir.FullName+@"\src\main\resources\application.properties",true);
    File.Copy("application-dev.properties",dir.FullName+@"\src\main\resources\application-dev.properties",true);
    File.Copy("application-dev.properties",dir.FullName+@"\src\main\resources\application-test.properties",true);
    
     //logback.xml
    LogbackTemplate logbackTemplate = new LogbackTemplate();　

    logbackTemplate.SetProperty("ArtifactId",this.ArtifactId);


    String logbackText=logbackTemplate.RenderToString();
   

    using (var sink = new StreamWriter(dir.FullName+@"\src\main\resources\logback.xml", false, utf8WithoutBom))
    {
        sink.WriteLine(logbackText);
    }
    
    //generatorConfig.xml
    GeneratorConfigTemplate generatorConfigTemplate = new GeneratorConfigTemplate();　

    logbackTemplate.SetProperty("ArtifactId",this.ArtifactId);
    logbackTemplate.SetProperty("MysqlConnectorPath",this.MysqlConnectorPath);
    logbackTemplate.SetProperty("DevDBConnectionURL",this.DevDBConnectionURL);
    logbackTemplate.SetProperty("DevDBUserId",this.DevDBUserId);
    logbackTemplate.SetProperty("DevDBPassword",this.DevDBPassword);

    String generatorConfigText=generatorConfigTemplate.RenderToString();
   

    using (var sink = new StreamWriter(dir.FullName+@"\src\main\resources\generatorConfig.xml", false, utf8WithoutBom))
    {
        sink.WriteLine(generatorConfigText);
    }
    
    
    //创建包目录
    String[] subfolders=this.PackageName.Split(new Char[]{'.'});
    String baseFolderPath=dir.FullName+@"\src\main\java";
    
    foreach(String folder in subfolders){
        baseFolderPath+=@"\"+folder;
        Directory.CreateDirectory(baseFolderPath);
    }
    
    //创建入口Application类
    CodeTemplate appTemplate = new AppTemplate();　

    appTemplate.SetProperty("PackageName",this.PackageName);
    //appTemplate.RenderToFile(baseFolderPath+@"\Application.java",true);

    String appText=appTemplate.RenderToString();
    
    using (var sink = new StreamWriter(baseFolderPath+@"\Application.java", false, utf8WithoutBom))
    {
        sink.WriteLine(appText);
    }
    
    //创建Swagger配置类
    CodeTemplate swaggerTemplate = new SwaggerTemplate();　

    swaggerTemplate.SetProperty("PackageName",this.PackageName);
    appText=swaggerTemplate.RenderToString();
    
    using (var sink = new StreamWriter(baseFolderPath+@"\SwaggerConfig.java", false, utf8WithoutBom))
    {
        sink.WriteLine(appText);
    }
    
    //创建CheckHealth类
    CodeTemplate checkHealthTemplate = new CheckHealthTemplate();　

    checkHealthTemplate.SetProperty("PackageName",this.PackageName);
    appText=checkHealthTemplate.RenderToString();
    
    using (var sink = new StreamWriter(baseFolderPath+@"\HealthCheckController.java", false, utf8WithoutBom))
    {
        sink.WriteLine(appText);
    }
    
    Debug.WriteLine(result);
   

  
    
    return "成功";
}
// My methods here.
public string SampleMethod()
{
  return "Method output.";
}
</script>