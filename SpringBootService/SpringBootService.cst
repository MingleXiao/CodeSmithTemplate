<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="Text" Debug="True" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.DirectoryServices" %>
<%@ Assembly Name="System.Web" %>
<%@ Assembly Name="System.Xml" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Text" %>
<%@ Import NameSpace="System.Text.RegularExpressions" %>
<%@ Import NameSpace="System.Diagnostics" %>
<%@ Import NameSpace="System.Xml" %>
<%@ Import NameSpace="System.Xml.Xsl" %>
<%@ Import NameSpace="System.Xml.XPath" %> 

<%@ Register Template="ParentPom.cst" Name="ParentPomTemplate" %>
<%@ Register Template="ApiModule/ApiPom.cst" Name="ApiPomTemplate" %>
<%@ Register Template="ApiModule/ApiApplication.cst" Name="ApiAppTemplate" %>
<%@ Register Template="DomainModule/DomainPom.cst" Name="DomainTemplate" %>
<%@ Register Template="ContractModule/ContractPom.cst" Name="ContractPomTemplate" %>
<%@ Property Name="GroupId" Default="xiaomin.demo" Type="System.String" Description="项目GroupId" %>
<%@ Property Name="ArtifactId" Default="demo" Type="System.String" Description="项目ArtifactId" %>
<%@ Property Name="Version" Default="1.0" Type="System.String" Description="项目版本" %>
<%@ Property Name="SpringBootVersion" Default="1.5.9.RELEASE" Type="System.String" Description="Spring Boot版本" %>
<%@ Property Name="PackageName" Default="xiaomin.demo" Type="System.String" %>
<%@ Property Name="OutPut" Default="D:" Type="System.String" %>
<%= CreateProject()%>
<script runat="template">
public string CreateProject(){
    string apiModuleFolder=String.Format(@"\{0}-api",this.ArtifactId);
    string contractModuleFolder=String.Format(@"\{0}-contract",this.ArtifactId);
    string domainModuleFolder=String.Format(@"\{0}-domain",this.ArtifactId);
    string adminserviceModuleFolder=String.Format(@"\{0}-adminservice",this.ArtifactId);
    
    //创建根目录
    var rootDir=Directory.CreateDirectory(this.OutPut+this.ArtifactId);
    
    //创建ParentPom文件
    CodeTemplate pomtemplate = new ParentPomTemplate();　
    pomtemplate.SetProperty("GroupId",this.GroupId);
    pomtemplate.SetProperty("ArtifactId",this.ArtifactId);
    pomtemplate.SetProperty("Version",this.Version);
    pomtemplate.SetProperty("SpringBootVersion",this.SpringBootVersion);
    String result=pomtemplate.RenderToString();
    pomtemplate.RenderToFile(rootDir.FullName+@"\pom.xml",true);
    Debug.WriteLine(result);
    
    //创建子目录
    
    CreateContractModule(rootDir.FullName+contractModuleFolder);
    CreateApiModule(rootDir.FullName+apiModuleFolder);
    CreateDomainModule(rootDir.FullName+domainModuleFolder);
    CreateCommonFolders(rootDir.FullName+adminserviceModuleFolder);
    

    
   
   

  
    
    return "成功";
}


public string CreateCommonFolders(String basePath){
    string [] folders={
        @"\src",
        @"\src\main",
        @"\src\main\java",
        @"\src\main\resources",
        @"\src\test",
        @"\src\test\java"
    };
    
        //创建基本目录
    foreach(String folder in folders){
        Debug.WriteLine(basePath+folder);
        Directory.CreateDirectory(basePath+folder);
    }
    
    //创建包目录
    String[] subfolders=this.PackageName.Split(new Char[]{'.'});
    String baseFolderPath=basePath+@"\src\main\java";
    
    foreach(String folder in subfolders){
        baseFolderPath+=@"\"+folder;
        Directory.CreateDirectory(baseFolderPath);
    }
    
    return baseFolderPath;
}

public void CreateContractModule(String basePath){
    //创建基本目录
    CreateCommonFolders(basePath);
    //创建Pom文件
    CodeTemplate pomtemplate = new ContractPomTemplate();　
    pomtemplate.SetProperty("GroupId",this.GroupId);
    pomtemplate.SetProperty("ArtifactId",this.ArtifactId);
    pomtemplate.SetProperty("Version",this.Version);
    String result=pomtemplate.RenderToString();
    pomtemplate.RenderToFile(basePath+@"\pom.xml",true);
    Debug.WriteLine(result);
}

public void CreateDomainModule(String basePath){
     //创建基本目录
    string basePackageFolder=CreateCommonFolders(basePath);
    
    //创建Pom文件
    CodeTemplate pomtemplate = new DomainTemplate();　
    pomtemplate.SetProperty("GroupId",this.GroupId);
    pomtemplate.SetProperty("ArtifactId",this.ArtifactId);
    pomtemplate.SetProperty("Version",this.Version);
    String result=pomtemplate.RenderToString();
    pomtemplate.RenderToFile(basePath+@"\pom.xml",true);
    Debug.WriteLine(result);
}

public void CreateApiModule(String basePath){
    //创建基本目录
    string basePackageFolder=CreateCommonFolders(basePath);
    
    //创建Pom文件
    CodeTemplate pomtemplate = new ApiPomTemplate();　
    pomtemplate.SetProperty("GroupId",this.GroupId);
    pomtemplate.SetProperty("ArtifactId",this.ArtifactId);
    pomtemplate.SetProperty("Version",this.Version);
    String result=pomtemplate.RenderToString();
    pomtemplate.RenderToFile(basePath+@"\pom.xml",true);
    Debug.WriteLine(result);
    
    //创建入口Application类
    CodeTemplate appTemplate = new ApiAppTemplate();　

    appTemplate.SetProperty("PackageName",this.PackageName);
    //appTemplate.RenderToFile(baseFolderPath+@"\Application.java",true);

    String appText=appTemplate.RenderToString();
    var utf8WithoutBom = new System.Text.UTF8Encoding(false);

    using (var sink = new StreamWriter(basePackageFolder+@"\Application.java", false, utf8WithoutBom))
    {
        sink.WriteLine(appText);
    }
   
}

public void CreateAdminServiceModule(String path){
}
// My methods here.
public string SampleMethod()
{
  return "Method output.";
}
</script>